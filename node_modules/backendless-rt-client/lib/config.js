'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _backendlessRequest = require('backendless-request');

var _backendlessRequest2 = _interopRequireDefault(_backendlessRequest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var isUndefined = function isUndefined(value) {
  return typeof value === 'undefined';
};
var isString = function isString(value) {
  return typeof value === 'string';
};
var isFunction = function isFunction(value) {
  return typeof value === 'function';
};
var isObject = function isObject(value) {
  return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value !== null;
};

var RTConfig = function () {
  function RTConfig(config) {
    _classCallCheck(this, RTConfig);

    this.appId = null;
    this.lookupPath = null;
    this.lookupHeaders = {};
    this.debugMode = false;
    this.connectQuery = {};
    this.socketConfigTransform = null;

    this.socketConfig = null;

    this.set(config);
  }

  _createClass(RTConfig, [{
    key: 'set',
    value: function set(config) {
      if (!config) {
        return;
      }

      if (!isUndefined(config.appId)) {
        if (!isString(config.appId)) {
          throw new Error('"appId" must be String.');
        }

        this.appId = config.appId;
      }

      if (!isUndefined(config.lookupPath)) {
        if (!isString(config.lookupPath)) {
          throw new Error('"lookupPath" must be String.');
        }

        this.lookupPath = config.lookupPath;
      }

      if (!isUndefined(config.lookupHeaders)) {
        if (!isObject(config.lookupHeaders)) {
          throw new Error('"lookupHeaders" must be Object.');
        }

        this.lookupHeaders = config.lookupHeaders;
      }

      if (!isUndefined(config.debugMode)) {
        this.debugMode = !!config.debugMode;
      }

      if (!isUndefined(config.connectQuery)) {
        if (isFunction(config.connectQuery)) {
          this.getConnectQuery = config.connectQuery;
        } else if (isObject(config.connectQuery)) {
          this.connectQuery = config.connectQuery;
        } else {
          throw new Error('"connectQuery" must be Function or Object.');
        }
      }

      if (!isUndefined(config.socketConfigTransform)) {
        if (isFunction(config.socketConfigTransform)) {
          this.socketConfigTransform = config.socketConfigTransform;
        } else {
          throw new Error('"socketConfigTransform" must be Function.');
        }
      }
    }
  }, {
    key: 'getConnectQuery',
    value: function getConnectQuery() {
      return this.connectQuery;
    }
  }, {
    key: 'prepare',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var host, url, path, query, socketConfig;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (isString(this.lookupPath)) {
                  _context.next = 2;
                  break;
                }

                throw new Error('lookupPath must be String');

              case 2:
                _context.next = 4;
                return _backendlessRequest2.default.get(this.lookupPath).set(this.lookupHeaders);

              case 4:
                host = _context.sent;
                url = this.appId ? host + '/' + this.appId : host;
                path = this.appId ? '/' + this.appId : undefined;
                query = this.getConnectQuery();


                this.socketConfig = {
                  host: host,
                  url: url,
                  options: {
                    path: path,
                    query: query,
                    forceNew: true,
                    autoConnect: false,
                    reconnection: false
                  }
                };

                if (!this.socketConfigTransform) {
                  _context.next = 14;
                  break;
                }

                _context.next = 12;
                return this.socketConfigTransform(this.socketConfig);

              case 12:
                socketConfig = _context.sent;


                if (socketConfig) {
                  this.socketConfig = socketConfig;
                }

              case 14:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function prepare() {
        return _ref.apply(this, arguments);
      }

      return prepare;
    }()
  }, {
    key: 'getSocketConfig',
    value: function getSocketConfig() {
      return this.socketConfig;
    }
  }]);

  return RTConfig;
}();

exports.default = RTConfig;